<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="Account">

	<resultMap id="RM_Account" type="com.vc.core.model.Account">
        <result property="acctId" column="acct_id"/>
        <result property="userId" column="user_id"/>
        <result property="acctMoney" column="acct_money"/>
        <result property="blockMoney" column="block_money"/>
        <result property="acctSts" column="acct_sts"/>
        <result property="acctCreateTime" column="acct_create_time"/>
        <result property="acctModifyTime" column="acct_modify_time"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="Account.columns">
	    <![CDATA[
		acct_id,user_id,acct_money,block_money,acct_sts,acct_create_time,acct_modify_time
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="Account.insert" useGeneratedKeys="false" keyProperty="acctId">
    <![CDATA[
        INSERT INTO t_account (
        	acct_id ,
        	user_id ,
        	acct_money ,
        	block_money ,
        	acct_sts ,
        	acct_create_time ,
        	acct_modify_time 
        ) VALUES (
        	#{acctId,jdbcType=INTEGER} ,
        	#{userId,jdbcType=INTEGER} ,
        	#{acctMoney,jdbcType=DOUBLE} ,
        	#{blockMoney,jdbcType=DOUBLE} ,
        	#{acctSts,jdbcType=INTEGER} ,
        	#{acctCreateTime,jdbcType=TIMESTAMP} ,
        	#{acctModifyTime,jdbcType=TIMESTAMP} 
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="Account.update" >
    <![CDATA[
        UPDATE t_account SET
	        user_id = #{userId,jdbcType=INTEGER} ,
	        acct_money = #{acctMoney,jdbcType=DOUBLE} ,
	        block_money = #{blockMoney,jdbcType=DOUBLE} ,
	        acct_sts = #{acctSts,jdbcType=INTEGER} ,
	        acct_create_time = #{acctCreateTime,jdbcType=TIMESTAMP} ,
	        acct_modify_time = #{acctModifyTime,jdbcType=TIMESTAMP} 
        WHERE 
	        acct_id = #{acctId} 
    ]]>
	</update>

    <delete id="Account.delete">
    <![CDATA[
        DELETE FROM t_account WHERE
	        acct_id = #{acctId} 
    ]]>
    </delete>
    
    <select id="Account.getById" resultMap="RM_Account">
		SELECT <include refid="Account.columns" />
	    <![CDATA[
		    FROM t_account 
	        WHERE 
	        	acct_id = #{acctId} 
	    ]]>
	</select>
	
	<sql id="Account.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(acctId)">
				AND acct_id = #{acctId}
			</if>
	       <if test="@Ognl@isNotEmpty(userId)">
				AND user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(acctMoney)">
				AND acct_money = #{acctMoney}
			</if>
	       <if test="@Ognl@isNotEmpty(blockMoney)">
				AND block_money = #{blockMoney}
			</if>
	       <if test="@Ognl@isNotEmpty(acctSts)">
				AND acct_sts = #{acctSts}
			</if>
	       <if test="@Ognl@isNotEmpty(acctCreateTimeBegin)">
				AND acct_create_time >= #{acctCreateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(acctCreateTimeEnd)">
				AND acct_create_time &lt;= #{acctCreateTimeEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(acctModifyTimeBegin)">
				AND acct_modify_time >= #{acctModifyTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(acctModifyTimeEnd)">
				AND acct_modify_time &lt;= #{acctModifyTimeEnd}
		   </if>
		</where>
	</sql>
		
    <select id="Account.findPage.count" resultType="long">
        SELECT count(*) FROM t_account 
		<include refid="Account.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="Account.findPage" resultMap="RM_Account">
    	SELECT <include refid="Account.columns" />
	    FROM t_account 
		<include refid="Account.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

