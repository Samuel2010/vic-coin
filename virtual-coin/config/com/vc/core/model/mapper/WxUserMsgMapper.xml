<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">



<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="WxUserMsg">
	<resultMap id="RM_Wx_User_Msg" type="com.vc.core.model.WxUserMsg">
        <result property="msgId" column="MSG_ID"/>
        <result property="msgUserId" column="MSG_USER_ID"/>
        <result property="msgContent" column="MSG_CONTENT"/>
        <result property="msgStatus" column="MSG_STATUS"/>
        <result property="msgCreateTime" column="MSG_CREATE_TIME"/>
        <result property="msgModifyTime" column="MSG_MODIFY_TIME"/>
        <result column="msg_parent_ps_id" property="msgParentPsId"/>
        <result column="msg_ps_id" property="msgPsId"  />
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="WxUserMsg.columns">
	    <![CDATA[
		MSG_ID,MSG_USER_ID,MSG_CONTENT,MSG_STATUS,MSG_CREATE_TIME,MSG_MODIFY_TIME,msg_parent_ps_id, msg_ps_id 
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="WxUserMsg.insert" useGeneratedKeys="false" keyProperty="msgId">
    <![CDATA[
        INSERT INTO H_USER_MSG (
        	MSG_ID,
        	MSG_USER_ID,
        	MSG_CONTENT,
        	MSG_STATUS,
        	MSG_CREATE_TIME,
        	MSG_MODIFY_TIME,
        	msg_parent_ps_id, msg_ps_id
        ) VALUES (
        	#{msgId,jdbcType=VARCHAR} ,
        	#{msgUserId,jdbcType=VARCHAR} ,
        	#{msgContent,jdbcType=VARCHAR} ,
        	#{msgStatus,jdbcType=DECIMAL} ,
        	#{msgCreateTime,jdbcType=DATE} ,
        	#{msgModifyTime,jdbcType=DATE},
        	#{msgParentPsId,jdbcType=VARCHAR}, 
        	#{msgPsId,jdbcType=VARCHAR}
        )
    ]]>
	</insert>
    
	<update id="WxUserMsg.update" >
    <![CDATA[
        UPDATE H_USER_MSG SET
        	MSG_USER_ID = #{msgUserId,jdbcType=VARCHAR} ,
        	MSG_CONTENT = #{msgContent,jdbcType=VARCHAR} ,
        	MSG_STATUS = #{msgStatus,jdbcType=DECIMAL} ,
        	MSG_CREATE_TIME = #{msgCreateTime,jdbcType=DATE} ,
			MSG_MODIFY_TIME = #{msgModifyTime,jdbcType=DATE},
			msg_parent_ps_id = #{msgParentPsId,jdbcType=VARCHAR}, 
        	msg_ps_id = #{msgPsId,jdbcType=VARCHAR}
        WHERE 
	        MSG_ID = #{msgId}
    ]]>
	</update>

    <delete id="WxUserMsg.delete">
        UPDATE H_USER_MSG SET 
	        MSG_STATUS = 0,MSG_MODIFY_TIME = sysdate()
		    WHERE MSG_ID = #{msgId}
    </delete>
    
    <select id="WxUserMsg.getById" resultMap="RM_Wx_User_Msg">
		SELECT <include refid="WxUserMsg.columns" />
	    <![CDATA[
		    FROM H_USER_MSG 
	        WHERE MSG_ID = #{msgId}
	    ]]>
	</select>
	
	<sql id="WxUserMsg.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(msgId)">
				AND MSG_ID = #{msgId}
		   </if>
	       <if test="@Ognl@isNotEmpty(msgUserId)">
				AND MSG_USER_ID = #{msgUserId}
		   </if>
	       <if test="@Ognl@isNotEmpty(msgContent)">
				AND MSG_CONTENT = #{msgContent}
		   </if>
	       <if test="@Ognl@isNotEmpty(msgStatus)">
				AND MSG_STATUS = #{msgStatus}
		   </if>
	       <if test="@Ognl@isNotEmpty(msgCreateTimeBegin)">
				AND MSG_CREATE_TIME >= #{msgCreateTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(msgCreateTimeEnd)">
				AND MSG_CREATE_TIME &lt;= #{msgCreateTimeEnd}
		   </if>
		   <if test="@Ognl@isNotEmpty(msgModifyTimeBegin)">
				AND MSG_MODIFY_TIME >= #{msgModifyTimeBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(msgModifyTimeEnd)">
				AND MSG_MODIFY_TIME &lt;= #{msgModifyTimeEnd}
		   </if>
		   <if test="@Ognl@isNotEmpty(msgParentPsId)">
				and msg_parent_ps_id = #{msgParentPsId}
		   </if>
		   <if test="@Ognl@isNotEmpty(msgPsId)">
				and msg_ps_id = #{msgPsId}
		   </if>
		</where>
	</sql>
		
    <select id="WxUserMsg.findPage.count" resultType="long">
        SELECT count(*) FROM H_USER_MSG 
		<include refid="WxUserMsg.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="WxUserMsg.findPage" resultMap="RM_Wx_User_Msg">
    	SELECT <include refid="WxUserMsg.columns" />
	    FROM H_USER_MSG 
		<include refid="WxUserMsg.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>
    
    <select id="WxUserMsg.myMsgCount" resultType="Integer">
        SELECT count(*) FROM H_USER_MSG 
	        WHERE MSG_USER_ID = #{msgUserId}  AND MSG_STATUS=0 
    </select>
    
     <update id="WxUserMsg.updateUserMsg">
      UPDATE H_USER_MSG SET 
       MSG_STATUS=1 
      WHERE MSG_PARENT_PS_ID = #{psId}
    </update>
</mapper>

